package codigo;

import java_cup.runtime.Symbol;

parser code
{:
    public String errores="";
    private Symbol s;

    public void syntax_error(Symbol s){
       
        int valor =0;
        valor = s.right+1;
        System.out.println("\nERROR SINTAX: "+(String)s.value+" linea:("+valor+")\n");
        errores+="\nERROR SINTAX LINEA: "+(String)s.value ;
    }
    
    
    public String error(){
        return errores;}

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas, T_dato, Char,Int, If, Else, Do, While,Cadena, For,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Identificador,
    Numero, ERROR,Const,ReadToken,WriteToken;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR,DECLARACION_VARIABLES,
    READ,FUNCION,LLAMADA_FUNCION,ASIGNACION;

precedence left Op_atribucion, Op_incremento, Op_booleano, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Identificador,
    Numero, ERROR,Const,ReadToken,WriteToken;
precedence left Linea, Comillas, T_dato,Char, Int, If, Else, Do, While,Cadena, For,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional;



start with INICIO;

INICIO ::= 
    DECLARACION_VARIABLES|
    
    DECLARACION_VARIABLES T_dato Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
;
DECLARACION_VARIABLES ::=
    
    
    T_dato Identificador P_coma DECLARACION_VARIABLES | 
    T_dato Identificador Igual Numero P_coma DECLARACION_VARIABLES |
    Char Identificador Op_atribucion Comillas Comillas P_coma DECLARACION_VARIABLES|
    Char Identificador Igual Comillas Comillas P_coma DECLARACION_VARIABLES |
    Char Identificador Igual Comillas Identificador Comillas P_coma DECLARACION_VARIABLES|
    Const T_dato Identificador P_coma DECLARACION_VARIABLES | 
    Const T_dato Identificador Igual Numero P_coma DECLARACION_VARIABLES |
    Const Char Identificador Op_atribucion Comillas Comillas P_coma DECLARACION_VARIABLES|
    Const Char Identificador Igual Comillas Comillas P_coma DECLARACION_VARIABLES |
    Const Char Identificador Igual Comillas Identificador Comillas P_coma DECLARACION_VARIABLES|
    FUNCION
    
    
;
FUNCION ::=
    
    T_dato Identificador Parentesis_a  Parentesis_c Llave_a DECLARACION  SENTENCIA  Llave_c FUNCION|
    T_dato Identificador Parentesis_a Identificador Parentesis_c Llave_a DECLARACION SENTENCIA Llave_c FUNCION|
    
;
LLAMADA_FUNCION ::=
    
    ReadToken Parentesis_a Identificador Parentesis_c P_coma |
    ReadToken Parentesis_a  Parentesis_c P_coma |
    
;



SENTENCIA ::= 
    
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA FOR |
    FOR |
    SENTENCIA LLAMADA_FUNCION |
    LLAMADA_FUNCION |
    error P_coma |
    error Llave_c 
;
DECLARACION ::= 
    Int Identificador P_coma DECLARACION| 
    Int Identificador Op_atribucion Numero P_coma DECLARACION|
    Int Identificador Igual Numero P_coma DECLARACION|
    Int Identificador Op_incremento P_coma DECLARACION| 
    Int Op_incremento Identificador P_coma DECLARACION| 
    T_dato Identificador P_coma DECLARACION| 
    T_dato Identificador Op_atribucion Numero P_coma DECLARACION|
    T_dato Identificador Igual Numero P_coma DECLARACION|
    T_dato Identificador Op_incremento P_coma DECLARACION| 
    T_dato Op_incremento Identificador P_coma DECLARACION|
    Cadena Identificador Op_atribucion Comillas Comillas P_coma DECLARACION|
    Cadena Identificador Igual Comillas Comillas P_coma DECLARACION|
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma DECLARACION|
    Cadena Identificador Igual Comillas Identificador Comillas P_coma DECLARACION|
    
    
    
;
IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas|
    
    Identificador Op_relacional Op_booleano P_coma|
    Identificador Op_relacional Numero P_coma|
    Identificador Op_relacional Identificador P_coma|
    Identificador Op_relacional Comillas Comillas P_coma|
    Identificador Op_relacional Comillas Identificador Comillas P_coma |
    
    Numero Op_relacional Numero P_coma|
    Numero Op_relacional Identificador P_coma
    

;
IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;
WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;

FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;