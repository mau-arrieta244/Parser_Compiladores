
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 04 12:13:45 CST 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 04 12:13:45 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\002" +
    "\012\000\002\002\011\000\002\015\006\000\002\015\010" +
    "\000\002\015\011\000\002\015\011\000\002\015\012\000" +
    "\002\015\007\000\002\015\011\000\002\015\012\000\002" +
    "\015\012\000\002\015\013\000\002\015\003\000\002\017" +
    "\013\000\002\017\014\000\002\017\002\000\002\020\007" +
    "\000\002\020\006\000\002\020\002\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\005\000\002\003\004\000\002\004\006\000" +
    "\002\004\010\000\002\004\010\000\002\004\007\000\002" +
    "\004\007\000\002\004\006\000\002\004\010\000\002\004" +
    "\010\000\002\004\007\000\002\004\007\000\002\004\011" +
    "\000\002\004\011\000\002\004\012\000\002\004\012\000" +
    "\002\004\002\000\002\006\011\000\002\013\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\006\000\002\013\007\000\002\013\006\000\002\013\006" +
    "\000\002\013\006\000\002\013\007\000\002\013\010\000" +
    "\002\013\006\000\002\013\006\000\002\007\015\000\002" +
    "\010\011\000\002\012\011\000\002\014\012\000\002\014" +
    "\011\000\002\005\005\000\002\005\004\000\002\005\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\014\002\ufff0\006\007\007\004\010\011\044" +
    "\006\001\002\000\004\041\334\001\002\000\006\002\ufff3" +
    "\006\ufff3\001\002\000\006\006\305\007\304\001\002\000" +
    "\004\041\163\001\002\000\004\002\162\001\002\000\004" +
    "\037\154\001\002\000\006\002\000\006\013\001\002\000" +
    "\004\037\014\001\002\000\004\031\015\001\002\000\004" +
    "\032\016\001\002\000\004\033\017\001\002\000\024\003" +
    "\031\011\022\014\021\016\030\030\024\034\uffed\041\032" +
    "\042\036\045\033\001\002\000\022\011\uffe7\014\uffe7\016" +
    "\uffe7\030\uffe7\034\uffe7\041\uffe7\042\uffe7\045\uffe7\001\002" +
    "\000\004\031\146\001\002\000\004\031\134\001\002\000" +
    "\022\011\uffe5\014\uffe5\016\uffe5\030\uffe5\034\uffe5\041\uffe5" +
    "\042\uffe5\045\uffe5\001\002\000\030\003\uffcf\011\uffcf\014" +
    "\uffcf\016\uffcf\030\uffcf\032\uffcf\034\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\045\uffcf\001\002\000\022\011\uffe9\014\uffe9\016" +
    "\uffe9\030\uffe9\034\uffe9\041\uffe9\042\uffe9\045\uffe9\001\002" +
    "\000\022\011\uffeb\014\uffeb\016\uffeb\030\uffeb\034\uffeb\041" +
    "\uffeb\042\uffeb\045\uffeb\001\002\000\022\011\022\014\021" +
    "\016\030\030\024\034\133\041\032\042\036\045\033\001" +
    "\002\000\004\031\072\001\002\000\004\034\071\001\002" +
    "\000\004\025\054\001\002\000\004\031\046\001\002\000" +
    "\022\011\uffe3\014\uffe3\016\uffe3\030\uffe3\034\uffe3\041\uffe3" +
    "\042\uffe3\045\uffe3\001\002\000\004\003\044\001\002\000" +
    "\004\025\037\001\002\000\006\041\041\042\040\001\002" +
    "\000\004\040\043\001\002\000\004\040\042\001\002\000" +
    "\030\003\uffc3\011\uffc3\014\uffc3\016\uffc3\030\uffc3\032\uffc3" +
    "\034\uffc3\040\uffc3\041\uffc3\042\uffc3\045\uffc3\001\002\000" +
    "\030\003\uffc4\011\uffc4\014\uffc4\016\uffc4\030\uffc4\032\uffc4" +
    "\034\uffc4\040\uffc4\041\uffc4\042\uffc4\045\uffc4\001\002\000" +
    "\004\040\045\001\002\000\022\011\uffe1\014\uffe1\016\uffe1" +
    "\030\uffe1\034\uffe1\041\uffe1\042\uffe1\045\uffe1\001\002\000" +
    "\006\032\050\041\047\001\002\000\004\032\052\001\002" +
    "\000\004\040\051\001\002\000\022\011\uffee\014\uffee\016" +
    "\uffee\030\uffee\034\uffee\041\uffee\042\uffee\045\uffee\001\002" +
    "\000\004\040\053\001\002\000\022\011\uffef\014\uffef\016" +
    "\uffef\030\uffef\034\uffef\041\uffef\042\uffef\045\uffef\001\002" +
    "\000\012\005\056\030\057\041\060\042\055\001\002\000" +
    "\030\003\uffcd\011\uffcd\014\uffcd\016\uffcd\030\uffcd\032\uffcd" +
    "\034\uffcd\040\uffcd\041\uffcd\042\uffcd\045\uffcd\001\002\000" +
    "\006\005\063\041\064\001\002\000\030\003\uffce\011\uffce" +
    "\014\uffce\016\uffce\030\uffce\032\uffce\034\uffce\040\uffce\041" +
    "\uffce\042\uffce\045\uffce\001\002\000\030\003\uffcc\011\uffcc" +
    "\014\uffcc\016\uffcc\030\uffcc\032\uffcc\034\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\045\uffcc\001\002\000\030\003\uffc7\011\uffc7" +
    "\014\uffc7\016\uffc7\030\uffc7\032\uffc7\034\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\045\uffc7\001\002\000\030\003\uffc9\011\uffc9" +
    "\014\uffc9\016\uffc9\030\uffc9\032\uffc9\034\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\045\uffc9\001\002\000\030\003\uffcb\011\uffcb" +
    "\014\uffcb\016\uffcb\030\uffcb\032\uffcb\034\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\045\uffcb\001\002\000\004\005\065\001\002" +
    "\000\030\003\uffca\011\uffca\014\uffca\016\uffca\030\uffca\032" +
    "\uffca\034\uffca\040\uffca\041\uffca\042\uffca\045\uffca\001\002" +
    "\000\030\003\uffc5\011\uffc5\014\uffc5\016\uffc5\030\uffc5\032" +
    "\uffc5\034\uffc5\040\uffc5\041\uffc5\042\uffc5\045\uffc5\001\002" +
    "\000\030\003\uffc6\011\uffc6\014\uffc6\016\uffc6\030\uffc6\032" +
    "\uffc6\034\uffc6\040\uffc6\041\uffc6\042\uffc6\045\uffc6\001\002" +
    "\000\030\003\uffc8\011\uffc8\014\uffc8\016\uffc8\030\uffc8\032" +
    "\uffc8\034\uffc8\040\uffc8\041\uffc8\042\uffc8\045\uffc8\001\002" +
    "\000\022\011\uffe0\014\uffe0\016\uffe0\030\uffe0\034\uffe0\041" +
    "\uffe0\042\uffe0\045\uffe0\001\002\000\006\006\074\041\075" +
    "\001\002\000\004\032\121\001\002\000\004\041\112\001" +
    "\002\000\004\017\076\001\002\000\004\042\077\001\002" +
    "\000\004\040\100\001\002\000\010\030\024\041\032\042" +
    "\036\001\002\000\004\040\102\001\002\000\006\027\104" +
    "\041\105\001\002\000\004\032\uffbe\001\002\000\004\041" +
    "\111\001\002\000\006\026\106\027\107\001\002\000\004" +
    "\042\110\001\002\000\004\032\uffbc\001\002\000\004\032" +
    "\uffbd\001\002\000\004\032\uffbb\001\002\000\004\017\113" +
    "\001\002\000\004\042\114\001\002\000\004\040\115\001" +
    "\002\000\010\030\024\041\032\042\036\001\002\000\004" +
    "\040\117\001\002\000\006\027\104\041\105\001\002\000" +
    "\004\032\uffbf\001\002\000\004\033\122\001\002\000\024" +
    "\003\031\011\022\014\021\016\030\030\024\034\uffed\041" +
    "\032\042\036\045\033\001\002\000\022\011\022\014\021" +
    "\016\030\030\024\034\130\041\032\042\036\045\033\001" +
    "\002\000\022\011\uffe8\014\uffe8\016\uffe8\030\uffe8\034\uffe8" +
    "\041\uffe8\042\uffe8\045\uffe8\001\002\000\022\011\uffe6\014" +
    "\uffe6\016\uffe6\030\uffe6\034\uffe6\041\uffe6\042\uffe6\045\uffe6" +
    "\001\002\000\022\011\uffea\014\uffea\016\uffea\030\uffea\034" +
    "\uffea\041\uffea\042\uffea\045\uffea\001\002\000\022\011\uffec" +
    "\014\uffec\016\uffec\030\uffec\034\uffec\041\uffec\042\uffec\045" +
    "\uffec\001\002\000\022\011\uffc0\014\uffc0\016\uffc0\030\uffc0" +
    "\034\uffc0\041\uffc0\042\uffc0\045\uffc0\001\002\000\022\011" +
    "\uffe4\014\uffe4\016\uffe4\030\uffe4\034\uffe4\041\uffe4\042\uffe4" +
    "\045\uffe4\001\002\000\022\011\uffe2\014\uffe2\016\uffe2\030" +
    "\uffe2\034\uffe2\041\uffe2\042\uffe2\045\uffe2\001\002\000\004" +
    "\002\uffff\001\002\000\010\030\024\041\032\042\036\001" +
    "\002\000\004\032\136\001\002\000\004\033\137\001\002" +
    "\000\024\003\031\011\022\014\021\016\030\030\024\034" +
    "\uffed\041\032\042\036\045\033\001\002\000\022\011\022" +
    "\014\021\016\030\030\024\034\141\041\032\042\036\045" +
    "\033\001\002\000\024\011\uffd0\012\142\014\uffd0\016\uffd0" +
    "\030\uffd0\034\uffd0\041\uffd0\042\uffd0\045\uffd0\001\002\000" +
    "\004\033\143\001\002\000\024\003\031\011\022\014\021" +
    "\016\030\030\024\034\uffed\041\032\042\036\045\033\001" +
    "\002\000\022\011\022\014\021\016\030\030\024\034\145" +
    "\041\032\042\036\045\033\001\002\000\022\011\uffc2\014" +
    "\uffc2\016\uffc2\030\uffc2\034\uffc2\041\uffc2\042\uffc2\045\uffc2" +
    "\001\002\000\010\030\024\041\032\042\036\001\002\000" +
    "\004\032\150\001\002\000\004\033\151\001\002\000\024" +
    "\003\031\011\022\014\021\016\030\030\024\034\uffed\041" +
    "\032\042\036\045\033\001\002\000\022\011\022\014\021" +
    "\016\030\030\024\034\153\041\032\042\036\045\033\001" +
    "\002\000\022\011\uffc1\014\uffc1\016\uffc1\030\uffc1\034\uffc1" +
    "\041\uffc1\042\uffc1\045\uffc1\001\002\000\004\031\155\001" +
    "\002\000\004\032\156\001\002\000\004\033\157\001\002" +
    "\000\024\003\031\011\022\014\021\016\030\030\024\034" +
    "\uffed\041\032\042\036\045\033\001\002\000\022\011\022" +
    "\014\021\016\030\030\024\034\161\041\032\042\036\045" +
    "\033\001\002\000\004\002\ufffe\001\002\000\004\002\001" +
    "\001\002\000\010\017\166\031\164\040\165\001\002\000" +
    "\006\032\174\041\173\001\002\000\012\002\ufff0\006\007" +
    "\007\004\044\006\001\002\000\004\042\167\001\002\000" +
    "\004\040\170\001\002\000\012\002\ufff0\006\007\007\004" +
    "\044\006\001\002\000\006\002\ufffc\006\ufffc\001\002\000" +
    "\006\002\ufffd\006\ufffd\001\002\000\004\032\276\001\002" +
    "\000\004\033\175\001\002\000\032\003\uffd1\006\177\010" +
    "\200\011\uffd1\014\uffd1\015\201\016\uffd1\030\uffd1\034\uffd1" +
    "\041\uffd1\042\uffd1\045\uffd1\001\002\000\024\003\031\011" +
    "\022\014\021\016\030\030\024\034\uffed\041\032\042\036" +
    "\045\033\001\002\000\006\027\250\041\247\001\002\000" +
    "\006\027\226\041\225\001\002\000\004\041\202\001\002" +
    "\000\006\017\204\026\203\001\002\000\004\005\215\001" +
    "\002\000\004\005\205\001\002\000\006\005\206\041\207" +
    "\001\002\000\004\040\213\001\002\000\004\005\210\001" +
    "\002\000\004\040\211\001\002\000\032\003\uffd1\006\177" +
    "\010\200\011\uffd1\014\uffd1\015\201\016\uffd1\030\uffd1\034" +
    "\uffd1\041\uffd1\042\uffd1\045\uffd1\001\002\000\024\003\uffd2" +
    "\011\uffd2\014\uffd2\016\uffd2\030\uffd2\034\uffd2\041\uffd2\042" +
    "\uffd2\045\uffd2\001\002\000\032\003\uffd1\006\177\010\200" +
    "\011\uffd1\014\uffd1\015\201\016\uffd1\030\uffd1\034\uffd1\041" +
    "\uffd1\042\uffd1\045\uffd1\001\002\000\024\003\uffd4\011\uffd4" +
    "\014\uffd4\016\uffd4\030\uffd4\034\uffd4\041\uffd4\042\uffd4\045" +
    "\uffd4\001\002\000\006\005\216\041\217\001\002\000\004" +
    "\040\223\001\002\000\004\005\220\001\002\000\004\040" +
    "\221\001\002\000\032\003\uffd1\006\177\010\200\011\uffd1" +
    "\014\uffd1\015\201\016\uffd1\030\uffd1\034\uffd1\041\uffd1\042" +
    "\uffd1\045\uffd1\001\002\000\024\003\uffd3\011\uffd3\014\uffd3" +
    "\016\uffd3\030\uffd3\034\uffd3\041\uffd3\042\uffd3\045\uffd3\001" +
    "\002\000\032\003\uffd1\006\177\010\200\011\uffd1\014\uffd1" +
    "\015\201\016\uffd1\030\uffd1\034\uffd1\041\uffd1\042\uffd1\045" +
    "\uffd1\001\002\000\024\003\uffd5\011\uffd5\014\uffd5\016\uffd5" +
    "\030\uffd5\034\uffd5\041\uffd5\042\uffd5\045\uffd5\001\002\000" +
    "\012\017\235\026\232\027\234\040\233\001\002\000\004" +
    "\041\227\001\002\000\004\040\230\001\002\000\032\003" +
    "\uffd1\006\177\010\200\011\uffd1\014\uffd1\015\201\016\uffd1" +
    "\030\uffd1\034\uffd1\041\uffd1\042\uffd1\045\uffd1\001\002\000" +
    "\024\003\uffdb\011\uffdb\014\uffdb\016\uffdb\030\uffdb\034\uffdb" +
    "\041\uffdb\042\uffdb\045\uffdb\001\002\000\004\042\244\001" +
    "\002\000\032\003\uffd1\006\177\010\200\011\uffd1\014\uffd1" +
    "\015\201\016\uffd1\030\uffd1\034\uffd1\041\uffd1\042\uffd1\045" +
    "\uffd1\001\002\000\004\040\241\001\002\000\004\042\236" +
    "\001\002\000\004\040\237\001\002\000\032\003\uffd1\006" +
    "\177\010\200\011\uffd1\014\uffd1\015\201\016\uffd1\030\uffd1" +
    "\034\uffd1\041\uffd1\042\uffd1\045\uffd1\001\002\000\024\003" +
    "\uffdd\011\uffdd\014\uffdd\016\uffdd\030\uffdd\034\uffdd\041\uffdd" +
    "\042\uffdd\045\uffdd\001\002\000\032\003\uffd1\006\177\010" +
    "\200\011\uffd1\014\uffd1\015\201\016\uffd1\030\uffd1\034\uffd1" +
    "\041\uffd1\042\uffd1\045\uffd1\001\002\000\024\003\uffdc\011" +
    "\uffdc\014\uffdc\016\uffdc\030\uffdc\034\uffdc\041\uffdc\042\uffdc" +
    "\045\uffdc\001\002\000\024\003\uffdf\011\uffdf\014\uffdf\016" +
    "\uffdf\030\uffdf\034\uffdf\041\uffdf\042\uffdf\045\uffdf\001\002" +
    "\000\004\040\245\001\002\000\032\003\uffd1\006\177\010" +
    "\200\011\uffd1\014\uffd1\015\201\016\uffd1\030\uffd1\034\uffd1" +
    "\041\uffd1\042\uffd1\045\uffd1\001\002\000\024\003\uffde\011" +
    "\uffde\014\uffde\016\uffde\030\uffde\034\uffde\041\uffde\042\uffde" +
    "\045\uffde\001\002\000\012\017\257\026\254\027\256\040" +
    "\255\001\002\000\004\041\251\001\002\000\004\040\252" +
    "\001\002\000\032\003\uffd1\006\177\010\200\011\uffd1\014" +
    "\uffd1\015\201\016\uffd1\030\uffd1\034\uffd1\041\uffd1\042\uffd1" +
    "\045\uffd1\001\002\000\024\003\uffd6\011\uffd6\014\uffd6\016" +
    "\uffd6\030\uffd6\034\uffd6\041\uffd6\042\uffd6\045\uffd6\001\002" +
    "\000\004\042\266\001\002\000\032\003\uffd1\006\177\010" +
    "\200\011\uffd1\014\uffd1\015\201\016\uffd1\030\uffd1\034\uffd1" +
    "\041\uffd1\042\uffd1\045\uffd1\001\002\000\004\040\263\001" +
    "\002\000\004\042\260\001\002\000\004\040\261\001\002" +
    "\000\032\003\uffd1\006\177\010\200\011\uffd1\014\uffd1\015" +
    "\201\016\uffd1\030\uffd1\034\uffd1\041\uffd1\042\uffd1\045\uffd1" +
    "\001\002\000\024\003\uffd8\011\uffd8\014\uffd8\016\uffd8\030" +
    "\uffd8\034\uffd8\041\uffd8\042\uffd8\045\uffd8\001\002\000\032" +
    "\003\uffd1\006\177\010\200\011\uffd1\014\uffd1\015\201\016" +
    "\uffd1\030\uffd1\034\uffd1\041\uffd1\042\uffd1\045\uffd1\001\002" +
    "\000\024\003\uffd7\011\uffd7\014\uffd7\016\uffd7\030\uffd7\034" +
    "\uffd7\041\uffd7\042\uffd7\045\uffd7\001\002\000\024\003\uffda" +
    "\011\uffda\014\uffda\016\uffda\030\uffda\034\uffda\041\uffda\042" +
    "\uffda\045\uffda\001\002\000\004\040\267\001\002\000\032" +
    "\003\uffd1\006\177\010\200\011\uffd1\014\uffd1\015\201\016" +
    "\uffd1\030\uffd1\034\uffd1\041\uffd1\042\uffd1\045\uffd1\001\002" +
    "\000\024\003\uffd9\011\uffd9\014\uffd9\016\uffd9\030\uffd9\034" +
    "\uffd9\041\uffd9\042\uffd9\045\uffd9\001\002\000\022\011\022" +
    "\014\021\016\030\030\024\034\272\041\032\042\036\045" +
    "\033\001\002\000\006\002\ufff0\006\274\001\002\000\006" +
    "\002\ufff2\006\ufff2\001\002\000\004\041\275\001\002\000" +
    "\004\031\164\001\002\000\004\033\277\001\002\000\032" +
    "\003\uffd1\006\177\010\200\011\uffd1\014\uffd1\015\201\016" +
    "\uffd1\030\uffd1\034\uffd1\041\uffd1\042\uffd1\045\uffd1\001\002" +
    "\000\024\003\031\011\022\014\021\016\030\030\024\034" +
    "\uffed\041\032\042\036\045\033\001\002\000\022\011\022" +
    "\014\021\016\030\030\024\034\302\041\032\042\036\045" +
    "\033\001\002\000\006\002\ufff0\006\274\001\002\000\006" +
    "\002\ufff1\006\ufff1\001\002\000\004\041\315\001\002\000" +
    "\004\041\306\001\002\000\006\017\310\040\307\001\002" +
    "\000\012\002\ufff0\006\007\007\004\044\006\001\002\000" +
    "\004\042\311\001\002\000\004\040\312\001\002\000\012" +
    "\002\ufff0\006\007\007\004\044\006\001\002\000\006\002" +
    "\ufff7\006\ufff7\001\002\000\006\002\ufff8\006\ufff8\001\002" +
    "\000\006\017\317\026\316\001\002\000\004\005\330\001" +
    "\002\000\004\005\320\001\002\000\006\005\321\041\322" +
    "\001\002\000\004\040\326\001\002\000\004\005\323\001" +
    "\002\000\004\040\324\001\002\000\012\002\ufff0\006\007" +
    "\007\004\044\006\001\002\000\006\002\ufff4\006\ufff4\001" +
    "\002\000\012\002\ufff0\006\007\007\004\044\006\001\002" +
    "\000\006\002\ufff5\006\ufff5\001\002\000\004\005\331\001" +
    "\002\000\004\040\332\001\002\000\012\002\ufff0\006\007" +
    "\007\004\044\006\001\002\000\006\002\ufff6\006\ufff6\001" +
    "\002\000\006\017\336\026\335\001\002\000\004\005\347" +
    "\001\002\000\004\005\337\001\002\000\006\005\340\041" +
    "\341\001\002\000\004\040\345\001\002\000\004\005\342" +
    "\001\002\000\004\040\343\001\002\000\012\002\ufff0\006" +
    "\007\007\004\044\006\001\002\000\006\002\ufff9\006\ufff9" +
    "\001\002\000\012\002\ufff0\006\007\007\004\044\006\001" +
    "\002\000\006\002\ufffa\006\ufffa\001\002\000\004\005\350" +
    "\001\002\000\004\040\351\001\002\000\012\002\ufff0\006" +
    "\007\007\004\044\006\001\002\000\006\002\ufffb\006\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\010\002\007\015\011\017\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\026\006\025\007\024\010" +
    "\017\012\022\013\034\020\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\126\007\125\010\123\012\124\013\131\020\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\100\001\001" +
    "\000\002\001\001\000\004\005\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\115\001\001\000\002\001\001\000\004\005\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\122" +
    "\006\025\007\024\010\017\012\022\013\034\020\033\001" +
    "\001\000\016\006\126\007\125\010\123\012\124\013\131" +
    "\020\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\137\006\025\007\024\010\017\012\022\013\034\020" +
    "\033\001\001\000\016\006\126\007\125\010\123\012\124" +
    "\013\131\020\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\143\006\025\007\024\010\017\012\022" +
    "\013\034\020\033\001\001\000\016\006\126\007\125\010" +
    "\123\012\124\013\131\020\130\001\001\000\002\001\001" +
    "\000\004\013\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\151\006\025\007\024\010\017\012\022" +
    "\013\034\020\033\001\001\000\016\006\126\007\125\010" +
    "\123\012\124\013\131\020\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\157\006\025\007\024\010\017\012\022\013\034" +
    "\020\033\001\001\000\016\006\126\007\125\010\123\012" +
    "\124\013\131\020\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\171\017\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\170\017\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\175\001\001\000\020\003\270\006\025\007\024\010" +
    "\017\012\022\013\034\020\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\211\001\001\000\002\001\001\000\004\004\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\221\001\001" +
    "\000\002\001\001\000\004\004\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\237\001\001\000" +
    "\002\001\001\000\004\004\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\261\001\001\000\002\001\001\000\004\004\263\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\267\001\001\000\002\001\001\000\016\006\126" +
    "\007\125\010\123\012\124\013\131\020\130\001\001\000" +
    "\004\017\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\277\001" +
    "\001\000\020\003\300\006\025\007\024\010\017\012\022" +
    "\013\034\020\033\001\001\000\016\006\126\007\125\010" +
    "\123\012\124\013\131\020\130\001\001\000\004\017\302" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\313\017\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\312\017" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\324\017\004\001\001\000\002\001\001\000" +
    "\006\015\326\017\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\332\017\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\343\017\004" +
    "\001\001\000\002\001\001\000\006\015\345\017\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\351\017\004\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String errores="";
    private Symbol s;

    public void syntax_error(Symbol s){
       
        int valor =0;
        valor = s.right+1;
        System.out.println("\nERROR SINTAX: "+(String)s.value+" linea:("+valor+")\n");
        errores+="\nERROR SINTAX LINEA: "+(String)s.value ;
    }
    
    
    public String error(){
        return errores;}

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_BOOLEANA ::= Numero Op_relacional Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= T_dato Op_incremento Identificador P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= T_dato Identificador Op_incremento P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= T_dato Identificador Igual Numero P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= T_dato Identificador P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Int Op_incremento Identificador P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Int Identificador Op_incremento P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Int Identificador Igual Numero P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Int Identificador P_coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= error Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= SENTENCIA_BOOLEANA error P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA LLAMADA_FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LLAMADA_FUNCION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LLAMADA_FUNCION ::= ReadToken Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LLAMADA_FUNCION ::= ReadToken Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= T_dato Identificador Parentesis_a Identificador Parentesis_c Llave_a DECLARACION SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= T_dato Identificador Parentesis_a Parentesis_c Llave_a DECLARACION SENTENCIA Llave_c FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION_VARIABLES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION_VARIABLES ::= Const Char Identificador Igual Comillas Identificador Comillas P_coma DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION_VARIABLES ::= Const Char Identificador Igual Comillas Comillas P_coma DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION_VARIABLES ::= Const Char Identificador Op_atribucion Comillas Comillas P_coma DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION_VARIABLES ::= Const T_dato Identificador Igual Numero P_coma DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_VARIABLES ::= Const T_dato Identificador P_coma DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION_VARIABLES ::= Char Identificador Igual Comillas Identificador Comillas P_coma DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION_VARIABLES ::= Char Identificador Igual Comillas Comillas P_coma DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION_VARIABLES ::= Char Identificador Op_atribucion Comillas Comillas P_coma DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION_VARIABLES ::= T_dato Identificador Igual Numero P_coma DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION_VARIABLES ::= T_dato Identificador P_coma DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARACION_VARIABLES T_dato Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DECLARACION_VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

